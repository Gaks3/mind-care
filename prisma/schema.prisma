// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id
  email         String      @unique
  name          String
  emailVerified Boolean
  image         String?
  role          UserRole    @default(USER)
  description   String?     @db.VarChar(500)
  birthDate     DateTime?   @db.Date
  gender        Gender?
  phoneNumber   String?
  status        StatusUser?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  sessions           Session[]
  accounts           Account[]
  article            Article[]
  bookmark           BookmarkArticle[]
  bookingSchedule    BookingSchedule[]
  bookingSession     BookingSession[]
  reviewUserId       Review[]          @relation(name: "ReviewUserId")
  reviewPsychologyId Review[]          @relation(name: "ReviewPsychologyId")
  psychologyTopic    PsychologyTopic[]
  education          Education[]

  @@map("user")
}

enum UserRole {
  USER
  PSYCHOLOGY
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum StatusUser {
  WORKER
  STUDENT
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Article {
  id         Int      @id @default(autoincrement())
  title      String
  slug       String   @unique
  content    String
  createdBy  String
  user       User     @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  thumbnail  String
  view       Int      @default(0)
  categories String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  bookmark BookmarkArticle[]

  @@map("article")
}

model BookmarkArticle {
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  articleId Int
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, articleId])
  @@unique([userId, articleId])
  @@map("bookmark_article")
}

model BookingSchedule {
  id             Int      @id @default(autoincrement())
  psychologistId String
  psychologist   User     @relation(fields: [psychologistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isBooked       Boolean  @default(false)
  date           DateTime @db.Date
  time           DateTime @db.Time()
  meetingLink    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  bookingSession BookingSession[]

  @@map("booking_schedule")
}

model BookingSession {
  id              Int             @id @default(autoincrement())
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookingId       Int
  bookingSchedule BookingSchedule @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  status          BookingStatus   @default(PENDING)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("booking_session")
}

enum BookingStatus {
  ACCEPTED
  PENDING
  CANCELLED
  REJECTED
}

model Review {
  id           Int      @id @default(autoincrement())
  userId       String
  user         User     @relation("ReviewUserId", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  psychologyId String
  psychology   User     @relation("ReviewPsychologyId", fields: [psychologyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rate         Int
  reviewText   String
  createdAt    DateTime @default(now())

  @@map("review")
}

model Topic {
  id   Int    @id @default(autoincrement())
  name String @unique

  psychologyTopic PsychologyTopic[]

  @@map("topic")
}

model PsychologyTopic {
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  topicId Int
  topic   Topic  @relation(fields: [topicId], references: [id])

  @@id([userId, topicId])
  @@unique([userId, topicId])
  @@map("psychology_topic")
}

model Education {
  id          Int    @id @default(autoincrement())
  userId      String
  user        User   @relation(fields: [userId], references: [id])
  institution String
  year        Int
  degree      String
}
